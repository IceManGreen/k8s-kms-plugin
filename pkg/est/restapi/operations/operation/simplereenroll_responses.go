// Code generated by go-swagger; DO NOT EDIT.

package operation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// SimplereenrollOKCode is the HTTP code returned for type SimplereenrollOK
const SimplereenrollOKCode int = 200

/*SimplereenrollOK successful operation

swagger:response simplereenrollOK
*/
type SimplereenrollOK struct {
	/*

	  Default: "base64"
	*/
	ContentTransferEncoding string `json:"Content-Transfer-Encoding"`
	/*

	  Default: "application/pkcs7-mime"
	*/
	ContentType string `json:"Content-Type"`

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewSimplereenrollOK creates SimplereenrollOK with default headers values
func NewSimplereenrollOK() *SimplereenrollOK {

	var (
		// initialize headers with default values

		contentTransferEncodingDefault = string("base64")
		contentTypeDefault             = string("application/pkcs7-mime")
	)

	return &SimplereenrollOK{

		ContentTransferEncoding: contentTransferEncodingDefault,

		ContentType: contentTypeDefault,
	}
}

// WithContentTransferEncoding adds the contentTransferEncoding to the simplereenroll o k response
func (o *SimplereenrollOK) WithContentTransferEncoding(contentTransferEncoding string) *SimplereenrollOK {
	o.ContentTransferEncoding = contentTransferEncoding
	return o
}

// SetContentTransferEncoding sets the contentTransferEncoding to the simplereenroll o k response
func (o *SimplereenrollOK) SetContentTransferEncoding(contentTransferEncoding string) {
	o.ContentTransferEncoding = contentTransferEncoding
}

// WithContentType adds the contentType to the simplereenroll o k response
func (o *SimplereenrollOK) WithContentType(contentType string) *SimplereenrollOK {
	o.ContentType = contentType
	return o
}

// SetContentType sets the contentType to the simplereenroll o k response
func (o *SimplereenrollOK) SetContentType(contentType string) {
	o.ContentType = contentType
}

// WithPayload adds the payload to the simplereenroll o k response
func (o *SimplereenrollOK) WithPayload(payload string) *SimplereenrollOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the simplereenroll o k response
func (o *SimplereenrollOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SimplereenrollOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Content-Transfer-Encoding

	contentTransferEncoding := o.ContentTransferEncoding
	if contentTransferEncoding != "" {
		rw.Header().Set("Content-Transfer-Encoding", contentTransferEncoding)
	}

	// response header Content-Type

	contentType := o.ContentType
	if contentType != "" {
		rw.Header().Set("Content-Type", contentType)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// SimplereenrollBadRequestCode is the HTTP code returned for type SimplereenrollBadRequest
const SimplereenrollBadRequestCode int = 400

/*SimplereenrollBadRequest invalid request

swagger:response simplereenrollBadRequest
*/
type SimplereenrollBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewSimplereenrollBadRequest creates SimplereenrollBadRequest with default headers values
func NewSimplereenrollBadRequest() *SimplereenrollBadRequest {

	return &SimplereenrollBadRequest{}
}

// WithPayload adds the payload to the simplereenroll bad request response
func (o *SimplereenrollBadRequest) WithPayload(payload string) *SimplereenrollBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the simplereenroll bad request response
func (o *SimplereenrollBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SimplereenrollBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// SimplereenrollForbiddenCode is the HTTP code returned for type SimplereenrollForbidden
const SimplereenrollForbiddenCode int = 403

/*SimplereenrollForbidden client certificates were not presented

swagger:response simplereenrollForbidden
*/
type SimplereenrollForbidden struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewSimplereenrollForbidden creates SimplereenrollForbidden with default headers values
func NewSimplereenrollForbidden() *SimplereenrollForbidden {

	return &SimplereenrollForbidden{}
}

// WithPayload adds the payload to the simplereenroll forbidden response
func (o *SimplereenrollForbidden) WithPayload(payload string) *SimplereenrollForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the simplereenroll forbidden response
func (o *SimplereenrollForbidden) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SimplereenrollForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// SimplereenrollInternalServerErrorCode is the HTTP code returned for type SimplereenrollInternalServerError
const SimplereenrollInternalServerErrorCode int = 500

/*SimplereenrollInternalServerError something went wrong

swagger:response simplereenrollInternalServerError
*/
type SimplereenrollInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewSimplereenrollInternalServerError creates SimplereenrollInternalServerError with default headers values
func NewSimplereenrollInternalServerError() *SimplereenrollInternalServerError {

	return &SimplereenrollInternalServerError{}
}

// WithPayload adds the payload to the simplereenroll internal server error response
func (o *SimplereenrollInternalServerError) WithPayload(payload string) *SimplereenrollInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the simplereenroll internal server error response
func (o *SimplereenrollInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SimplereenrollInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
