// Code generated by go-swagger; DO NOT EDIT.

package operation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// GetCACertsOKCode is the HTTP code returned for type GetCACertsOK
const GetCACertsOKCode int = 200

/*GetCACertsOK successful operation

swagger:response getCACertsOK
*/
type GetCACertsOK struct {
	/*

	  Default: "base64"
	*/
	ContentTransferEncoding string `json:"Content-Transfer-Encoding"`
	/*

	  Default: "application/pkcs7-mime"
	*/
	ContentType string `json:"Content-Type"`

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetCACertsOK creates GetCACertsOK with default headers values
func NewGetCACertsOK() *GetCACertsOK {

	var (
		// initialize headers with default values

		contentTransferEncodingDefault = string("base64")
		contentTypeDefault             = string("application/pkcs7-mime")
	)

	return &GetCACertsOK{

		ContentTransferEncoding: contentTransferEncodingDefault,

		ContentType: contentTypeDefault,
	}
}

// WithContentTransferEncoding adds the contentTransferEncoding to the get c a certs o k response
func (o *GetCACertsOK) WithContentTransferEncoding(contentTransferEncoding string) *GetCACertsOK {
	o.ContentTransferEncoding = contentTransferEncoding
	return o
}

// SetContentTransferEncoding sets the contentTransferEncoding to the get c a certs o k response
func (o *GetCACertsOK) SetContentTransferEncoding(contentTransferEncoding string) {
	o.ContentTransferEncoding = contentTransferEncoding
}

// WithContentType adds the contentType to the get c a certs o k response
func (o *GetCACertsOK) WithContentType(contentType string) *GetCACertsOK {
	o.ContentType = contentType
	return o
}

// SetContentType sets the contentType to the get c a certs o k response
func (o *GetCACertsOK) SetContentType(contentType string) {
	o.ContentType = contentType
}

// WithPayload adds the payload to the get c a certs o k response
func (o *GetCACertsOK) WithPayload(payload string) *GetCACertsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get c a certs o k response
func (o *GetCACertsOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCACertsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Content-Transfer-Encoding

	contentTransferEncoding := o.ContentTransferEncoding
	if contentTransferEncoding != "" {
		rw.Header().Set("Content-Transfer-Encoding", contentTransferEncoding)
	}

	// response header Content-Type

	contentType := o.ContentType
	if contentType != "" {
		rw.Header().Set("Content-Type", contentType)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetCACertsInternalServerErrorCode is the HTTP code returned for type GetCACertsInternalServerError
const GetCACertsInternalServerErrorCode int = 500

/*GetCACertsInternalServerError something went wrong

swagger:response getCACertsInternalServerError
*/
type GetCACertsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetCACertsInternalServerError creates GetCACertsInternalServerError with default headers values
func NewGetCACertsInternalServerError() *GetCACertsInternalServerError {

	return &GetCACertsInternalServerError{}
}

// WithPayload adds the payload to the get c a certs internal server error response
func (o *GetCACertsInternalServerError) WithPayload(payload string) *GetCACertsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get c a certs internal server error response
func (o *GetCACertsInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCACertsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
