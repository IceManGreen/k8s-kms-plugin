// Code generated by go-swagger; DO NOT EDIT.

package operation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetCACertsReader is a Reader for the GetCACerts structure.
type GetCACertsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCACertsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCACertsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewGetCACertsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetCACertsOK creates a GetCACertsOK with default headers values
func NewGetCACertsOK() *GetCACertsOK {
	return &GetCACertsOK{
		ContentTransferEncoding: "base64",
		ContentType:             "application/pkcs7-mime",
	}
}

/*GetCACertsOK handles this case with default header values.

successful operation
*/
type GetCACertsOK struct {
	ContentTransferEncoding string

	ContentType string

	Payload string
}

func (o *GetCACertsOK) Error() string {
	return fmt.Sprintf("[GET /cacerts][%d] getCACertsOK  %+v", 200, o.Payload)
}

func (o *GetCACertsOK) GetPayload() string {
	return o.Payload
}

func (o *GetCACertsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Content-Transfer-Encoding
	o.ContentTransferEncoding = response.GetHeader("Content-Transfer-Encoding")

	// response header Content-Type
	o.ContentType = response.GetHeader("Content-Type")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCACertsInternalServerError creates a GetCACertsInternalServerError with default headers values
func NewGetCACertsInternalServerError() *GetCACertsInternalServerError {
	return &GetCACertsInternalServerError{}
}

/*GetCACertsInternalServerError handles this case with default header values.

something went wrong
*/
type GetCACertsInternalServerError struct {
	Payload string
}

func (o *GetCACertsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /cacerts][%d] getCACertsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCACertsInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *GetCACertsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
