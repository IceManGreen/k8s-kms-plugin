// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.10.0
// source: apis/istio/v1/service.proto

package istio

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_apis_istio_v1_service_proto protoreflect.FileDescriptor

var file_apis_istio_v1_service_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x74,
	0x68, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x70, 0x6c, 0x2e, 0x69, 0x6f, 0x2e, 0x65, 0x6b, 0x6d, 0x73,
	0x2e, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x69, 0x73, 0x74, 0x69, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xb7, 0x04, 0x0a, 0x14, 0x4b, 0x65, 0x79,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x6e, 0x0a, 0x0b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x45, 0x4b,
	0x12, 0x2e, 0x2e, 0x74, 0x68, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x70, 0x6c, 0x2e, 0x69, 0x6f, 0x2e,
	0x65, 0x6b, 0x6d, 0x73, 0x2e, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x45, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x74, 0x68, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x70, 0x6c, 0x2e, 0x69, 0x6f, 0x2e,
	0x65, 0x6b, 0x6d, 0x73, 0x2e, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x45, 0x4b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6e, 0x0a, 0x0b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x45, 0x4b,
	0x12, 0x2e, 0x2e, 0x74, 0x68, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x70, 0x6c, 0x2e, 0x69, 0x6f, 0x2e,
	0x65, 0x6b, 0x6d, 0x73, 0x2e, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x45, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x74, 0x68, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x70, 0x6c, 0x2e, 0x69, 0x6f, 0x2e,
	0x65, 0x6b, 0x6d, 0x73, 0x2e, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x45, 0x4b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x62, 0x0a, 0x07, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x45, 0x4b, 0x12, 0x2a, 0x2e, 0x74,
	0x68, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x70, 0x6c, 0x2e, 0x69, 0x6f, 0x2e, 0x65, 0x6b, 0x6d, 0x73,
	0x2e, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x45,
	0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x74, 0x68, 0x61, 0x6c, 0x65,
	0x73, 0x63, 0x70, 0x6c, 0x2e, 0x69, 0x6f, 0x2e, 0x65, 0x6b, 0x6d, 0x73, 0x2e, 0x69, 0x73, 0x74,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x45, 0x4b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x0b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x4b, 0x45, 0x4b, 0x12, 0x2e, 0x2e, 0x74, 0x68, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x70, 0x6c,
	0x2e, 0x69, 0x6f, 0x2e, 0x65, 0x6b, 0x6d, 0x73, 0x2e, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x45, 0x4b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x74, 0x68, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x70, 0x6c,
	0x2e, 0x69, 0x6f, 0x2e, 0x65, 0x6b, 0x6d, 0x73, 0x2e, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x45, 0x4b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x0a, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x4b, 0x45, 0x4b, 0x12, 0x2d, 0x2e, 0x74, 0x68, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x70, 0x6c, 0x2e,
	0x69, 0x6f, 0x2e, 0x65, 0x6b, 0x6d, 0x73, 0x2e, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x4b, 0x45, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x74, 0x68, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x70, 0x6c, 0x2e, 0x69,
	0x6f, 0x2e, 0x65, 0x6b, 0x6d, 0x73, 0x2e, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x4b, 0x45, 0x4b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x74, 0x68, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x70, 0x6c, 0x2d, 0x69, 0x6f, 0x2f, 0x6b, 0x38,
	0x73, 0x2d, 0x6b, 0x6d, 0x73, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x69, 0x73, 0x74, 0x69, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_apis_istio_v1_service_proto_goTypes = []interface{}{
	(*GenerateDEKRequest)(nil),  // 0: thalescpl.io.ekms.istio.v1.GenerateDEKRequest
	(*GenerateSEKRequest)(nil),  // 1: thalescpl.io.ekms.istio.v1.GenerateSEKRequest
	(*LoadSEKRequest)(nil),      // 2: thalescpl.io.ekms.istio.v1.LoadSEKRequest
	(*GenerateKEKRequest)(nil),  // 3: thalescpl.io.ekms.istio.v1.GenerateKEKRequest
	(*DestroyKEKRequest)(nil),   // 4: thalescpl.io.ekms.istio.v1.DestroyKEKRequest
	(*GenerateDEKResponse)(nil), // 5: thalescpl.io.ekms.istio.v1.GenerateDEKResponse
	(*GenerateSEKResponse)(nil), // 6: thalescpl.io.ekms.istio.v1.GenerateSEKResponse
	(*LoadSEKResponse)(nil),     // 7: thalescpl.io.ekms.istio.v1.LoadSEKResponse
	(*GenerateKEKResponse)(nil), // 8: thalescpl.io.ekms.istio.v1.GenerateKEKResponse
	(*DestroyKEKResponse)(nil),  // 9: thalescpl.io.ekms.istio.v1.DestroyKEKResponse
}
var file_apis_istio_v1_service_proto_depIdxs = []int32{
	0, // 0: thalescpl.io.ekms.istio.v1.KeyManagementService.GenerateDEK:input_type -> thalescpl.io.ekms.istio.v1.GenerateDEKRequest
	1, // 1: thalescpl.io.ekms.istio.v1.KeyManagementService.GenerateSEK:input_type -> thalescpl.io.ekms.istio.v1.GenerateSEKRequest
	2, // 2: thalescpl.io.ekms.istio.v1.KeyManagementService.LoadSEK:input_type -> thalescpl.io.ekms.istio.v1.LoadSEKRequest
	3, // 3: thalescpl.io.ekms.istio.v1.KeyManagementService.GenerateKEK:input_type -> thalescpl.io.ekms.istio.v1.GenerateKEKRequest
	4, // 4: thalescpl.io.ekms.istio.v1.KeyManagementService.DestroyKEK:input_type -> thalescpl.io.ekms.istio.v1.DestroyKEKRequest
	5, // 5: thalescpl.io.ekms.istio.v1.KeyManagementService.GenerateDEK:output_type -> thalescpl.io.ekms.istio.v1.GenerateDEKResponse
	6, // 6: thalescpl.io.ekms.istio.v1.KeyManagementService.GenerateSEK:output_type -> thalescpl.io.ekms.istio.v1.GenerateSEKResponse
	7, // 7: thalescpl.io.ekms.istio.v1.KeyManagementService.LoadSEK:output_type -> thalescpl.io.ekms.istio.v1.LoadSEKResponse
	8, // 8: thalescpl.io.ekms.istio.v1.KeyManagementService.GenerateKEK:output_type -> thalescpl.io.ekms.istio.v1.GenerateKEKResponse
	9, // 9: thalescpl.io.ekms.istio.v1.KeyManagementService.DestroyKEK:output_type -> thalescpl.io.ekms.istio.v1.DestroyKEKResponse
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_apis_istio_v1_service_proto_init() }
func file_apis_istio_v1_service_proto_init() {
	if File_apis_istio_v1_service_proto != nil {
		return
	}
	file_apis_istio_v1_messages_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_apis_istio_v1_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_apis_istio_v1_service_proto_goTypes,
		DependencyIndexes: file_apis_istio_v1_service_proto_depIdxs,
	}.Build()
	File_apis_istio_v1_service_proto = out.File
	file_apis_istio_v1_service_proto_rawDesc = nil
	file_apis_istio_v1_service_proto_goTypes = nil
	file_apis_istio_v1_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KeyManagementServiceClient is the client API for KeyManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeyManagementServiceClient interface {
	// GenerateDEK returns a wrapped (by KMS handled key)
	GenerateDEK(ctx context.Context, in *GenerateDEKRequest, opts ...grpc.CallOption) (*GenerateDEKResponse, error)
	// GenerateSEK returns a wrapped (by provided encrypted DEK ), for later use during loading and signing key generation
	GenerateSEK(ctx context.Context, in *GenerateSEKRequest, opts ...grpc.CallOption) (*GenerateSEKResponse, error)
	// LoadSEK returns the SEK unwrapped for the controller to use for CA work...
	LoadSEK(ctx context.Context, in *LoadSEKRequest, opts ...grpc.CallOption) (*LoadSEKResponse, error)
	// GenerateKEK returns the KID of the GeneratedKEK if allowed/successful
	GenerateKEK(ctx context.Context, in *GenerateKEKRequest, opts ...grpc.CallOption) (*GenerateKEKResponse, error)
	// DestroyKEK returns a success/failure to destroy the KEK... this is NON-REVERSIBLE...
	DestroyKEK(ctx context.Context, in *DestroyKEKRequest, opts ...grpc.CallOption) (*DestroyKEKResponse, error)
}

type keyManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyManagementServiceClient(cc grpc.ClientConnInterface) KeyManagementServiceClient {
	return &keyManagementServiceClient{cc}
}

func (c *keyManagementServiceClient) GenerateDEK(ctx context.Context, in *GenerateDEKRequest, opts ...grpc.CallOption) (*GenerateDEKResponse, error) {
	out := new(GenerateDEKResponse)
	err := c.cc.Invoke(ctx, "/thalescpl.io.ekms.istio.v1.KeyManagementService/GenerateDEK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) GenerateSEK(ctx context.Context, in *GenerateSEKRequest, opts ...grpc.CallOption) (*GenerateSEKResponse, error) {
	out := new(GenerateSEKResponse)
	err := c.cc.Invoke(ctx, "/thalescpl.io.ekms.istio.v1.KeyManagementService/GenerateSEK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) LoadSEK(ctx context.Context, in *LoadSEKRequest, opts ...grpc.CallOption) (*LoadSEKResponse, error) {
	out := new(LoadSEKResponse)
	err := c.cc.Invoke(ctx, "/thalescpl.io.ekms.istio.v1.KeyManagementService/LoadSEK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) GenerateKEK(ctx context.Context, in *GenerateKEKRequest, opts ...grpc.CallOption) (*GenerateKEKResponse, error) {
	out := new(GenerateKEKResponse)
	err := c.cc.Invoke(ctx, "/thalescpl.io.ekms.istio.v1.KeyManagementService/GenerateKEK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementServiceClient) DestroyKEK(ctx context.Context, in *DestroyKEKRequest, opts ...grpc.CallOption) (*DestroyKEKResponse, error) {
	out := new(DestroyKEKResponse)
	err := c.cc.Invoke(ctx, "/thalescpl.io.ekms.istio.v1.KeyManagementService/DestroyKEK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyManagementServiceServer is the server API for KeyManagementService service.
type KeyManagementServiceServer interface {
	// GenerateDEK returns a wrapped (by KMS handled key)
	GenerateDEK(context.Context, *GenerateDEKRequest) (*GenerateDEKResponse, error)
	// GenerateSEK returns a wrapped (by provided encrypted DEK ), for later use during loading and signing key generation
	GenerateSEK(context.Context, *GenerateSEKRequest) (*GenerateSEKResponse, error)
	// LoadSEK returns the SEK unwrapped for the controller to use for CA work...
	LoadSEK(context.Context, *LoadSEKRequest) (*LoadSEKResponse, error)
	// GenerateKEK returns the KID of the GeneratedKEK if allowed/successful
	GenerateKEK(context.Context, *GenerateKEKRequest) (*GenerateKEKResponse, error)
	// DestroyKEK returns a success/failure to destroy the KEK... this is NON-REVERSIBLE...
	DestroyKEK(context.Context, *DestroyKEKRequest) (*DestroyKEKResponse, error)
}

// UnimplementedKeyManagementServiceServer can be embedded to have forward compatible implementations.
type UnimplementedKeyManagementServiceServer struct {
}

func (*UnimplementedKeyManagementServiceServer) GenerateDEK(context.Context, *GenerateDEKRequest) (*GenerateDEKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateDEK not implemented")
}
func (*UnimplementedKeyManagementServiceServer) GenerateSEK(context.Context, *GenerateSEKRequest) (*GenerateSEKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSEK not implemented")
}
func (*UnimplementedKeyManagementServiceServer) LoadSEK(context.Context, *LoadSEKRequest) (*LoadSEKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadSEK not implemented")
}
func (*UnimplementedKeyManagementServiceServer) GenerateKEK(context.Context, *GenerateKEKRequest) (*GenerateKEKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateKEK not implemented")
}
func (*UnimplementedKeyManagementServiceServer) DestroyKEK(context.Context, *DestroyKEKRequest) (*DestroyKEKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyKEK not implemented")
}

func RegisterKeyManagementServiceServer(s *grpc.Server, srv KeyManagementServiceServer) {
	s.RegisterService(&_KeyManagementService_serviceDesc, srv)
}

func _KeyManagementService_GenerateDEK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateDEKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).GenerateDEK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thalescpl.io.ekms.istio.v1.KeyManagementService/GenerateDEK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).GenerateDEK(ctx, req.(*GenerateDEKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_GenerateSEK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateSEKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).GenerateSEK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thalescpl.io.ekms.istio.v1.KeyManagementService/GenerateSEK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).GenerateSEK(ctx, req.(*GenerateSEKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_LoadSEK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadSEKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).LoadSEK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thalescpl.io.ekms.istio.v1.KeyManagementService/LoadSEK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).LoadSEK(ctx, req.(*LoadSEKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_GenerateKEK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateKEKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).GenerateKEK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thalescpl.io.ekms.istio.v1.KeyManagementService/GenerateKEK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).GenerateKEK(ctx, req.(*GenerateKEKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagementService_DestroyKEK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyKEKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServiceServer).DestroyKEK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thalescpl.io.ekms.istio.v1.KeyManagementService/DestroyKEK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServiceServer).DestroyKEK(ctx, req.(*DestroyKEKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyManagementService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "thalescpl.io.ekms.istio.v1.KeyManagementService",
	HandlerType: (*KeyManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateDEK",
			Handler:    _KeyManagementService_GenerateDEK_Handler,
		},
		{
			MethodName: "GenerateSEK",
			Handler:    _KeyManagementService_GenerateSEK_Handler,
		},
		{
			MethodName: "LoadSEK",
			Handler:    _KeyManagementService_LoadSEK_Handler,
		},
		{
			MethodName: "GenerateKEK",
			Handler:    _KeyManagementService_GenerateKEK_Handler,
		},
		{
			MethodName: "DestroyKEK",
			Handler:    _KeyManagementService_DestroyKEK_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis/istio/v1/service.proto",
}
