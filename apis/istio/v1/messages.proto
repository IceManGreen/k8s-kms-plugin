//
//Copyright 2018 The Kubernetes Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//

syntax = "proto3";

package thalescpl.io.ekms.istio.v1;

option go_package = "github.com/thalescpl-io/k8s-kms-plugin/apis/istio/v1;istio";

import "google/protobuf/timestamp.proto";
import "protoc-gen-swagger/options/annotations.proto";

enum KeyKind {
  UNKNOWN = 0;
  AES = 1;
  RSA = 2;
  ECC = 3;
}

message GenerateKEKRequest {
  // optional kid, otherwise will be autogenerated as a UUID.v4 in the response
  bytes kek_kid = 1;
}

message GenerateKEKResponse {
  // KEK kid
  bytes kek_kid = 1;
}

message DestroyKEKRequest {
  // Required kid of KEK to find and delete
  bytes kek_kid = 1;
}

message DestroyKEKResponse {
  // successful destroy?
  bool success = 1;
}

message GenerateDEKRequest {
  // key size in bits
  int64 size = 1;
  // What kind of key is it... only Symmetric kinds will be supported
  KeyKind kind = 2;
  // Parent KID of the KEK
  bytes kek_kid = 3;
}

message GenerateDEKResponse {
  // Encrypted key blob
  bytes encrypted_dek_blob = 1;
}

message GenerateRootCAKRequest {
  // key size in bits
  int64 size = 1;
  // What kind of key is it... only Asymmetric kinds will be supported
  KeyKind kind = 2;
  // Root CA Key ID
  bytes root_ca_kid = 3;
}

message GenerateRootCAKResponse {
  // Root CA Key ID
  bytes root_ca_kid = 1;
}

message DestroyRootCAKRequest {
  // Required kid of KEK to find and delete
  bytes kek_kid = 1;
}

message DestroyRootCAKResponse {
  // successful destroy?
  bool success = 1;
}

message GenerateSEKRequest {
  // key size in bits
  int64 size = 1;
  // What kind of key is it... only Asymmetric kinds will be supported
  KeyKind kind = 2;
  // Encrypted blob of DEK
  bytes encrypted_dek_blob = 3;
  // Encrypted blob of SEK
  bytes encrypted_sek_blob = 4;
  // Parent KID of the KEK
  bytes kek_kid = 5;
}

message GenerateSEKResponse {
  // Encrypted blob of SEK encrypted by DEK
  bytes encrypted_sek_blob = 1;
}

message LoadSEKRequest {
  // Encrypted blob of DEK
  bytes encrypted_dek_blob = 1;
  // Encrypted blob of SEK
  bytes encrypted_sek_blob = 2;
  // KEK
  bytes kek_kid = 3;
  // Root CA Key ID
  bytes root_ca_kid = 4;
}

message LoadSEKResponse {
  // Clear SEK
  bytes clear_sek = 1;
}

message SignCSRRequest {
  // Encrypted blob of DEK
  bytes csr = 1;
  // Root CA Key ID
  bytes root_ca_kid = 2;
}

message SignCSRResponse {
  // Certificate in PEM Form
  bytes cert = 1;
}
