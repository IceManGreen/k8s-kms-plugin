syntax = "proto3";

package thalescpl.io.ekms.istio.v1;

option go_package = "github.com/thalescpl-io/k8s-kms-plugin/apis/istio/v1;istio";

import "apis/istio/v1/messages.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-swagger/options/annotations.proto";

service KeyManagementService {
  // GenerateKEK returns the KID of the GeneratedKEK if allowed/successful
  rpc GenerateKEK(GenerateKEKRequest) returns (GenerateKEKResponse);
  // DestroyKEK returns a success/failure to destroy the KEK... this is NON-REVERSIBLE...
  rpc DestroyKEK(DestroyKEKRequest) returns (DestroyKEKResponse);
  // GenerateDEK returns a wrapped (by KMS handled key)
  rpc GenerateDEK(GenerateDEKRequest) returns (GenerateDEKResponse);
  // GenerateSEK returns a wrapped (by provided encrypted DEK ), for later use during loading and signing key generation

  rpc GenerateRootCAK(GenerateRootCAKRequest) returns (GenerateRootCAKResponse);
  // GenerateSEK returns a wrapped (by provided encrypted DEK ), for later use during loading and signing key generation
  rpc DestroyRootCAK(DestroyRootCAKRequest) returns (DestroyRootCAKResponse);
  // GenerateDEK returns a wrapped (by KMS handled key)
  rpc GenerateSEK(GenerateSEKRequest) returns (GenerateSEKResponse);
  // LoadSEK returns the SEK unwrapped for the controller to use for CA work...
  rpc LoadSEK(LoadSEKRequest) returns (LoadSEKResponse);
  // SignCSR signs a CSR for the in inbound
  rpc SignCSR(SignCSRRequest) returns (SignCSRResponse);
}
